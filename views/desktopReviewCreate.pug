extends layout

block content
    
    .topnav
        ul.breadcrumb
            li
                a(href='/reviews') Reviews Dashboard
                    i.fa.fa-caret-right(aria-hidden='true')
            li Create Desktop Review
        .gradient
            .username.userright #{user.username} 
                i.fa.fa-user-circle(aria-hidden='true').usernameicon

    //- Info Deck Trip History Review Request and ClientProfile
    if tripRequestData && !(search_result_count === 0)
        .formcontainer
            .container-fluid.card
                .form-row
                    .form-group.col-sm-2
                        label(for='clientId') ClientID: 
                        input#clientId.form-control.form-control-sm(type='text' placeholder='ClientId' name='clientId'  readonly required='true' value=tripRequestData[0].ClientProfileModel.clientId)               
                    .form-group.col-sm-2
                        label(for='clientName') Client Name: 
                        input#clientName.form-control.form-control-sm(type='text' placeholder='Client Name' name='clientName'  readonly required='true' value=tripRequestData[0].ClientProfileModel.clientName)     
                    .form-group.col-sm-2
                        label(for='active') Active: 
                        input#active.form-control.form-control-sm(type='text' placeholder='Active' name='active'  readonly required='true' value=tripRequestData[0].ClientProfileModel.active)
                    .form-group.col-sm-2
                        label(for='conditions') Conditions: 
                        input#conditions.form-control.form-control-sm(type='text' placeholder='Conditions' name='conditions'  readonly required='true' value=tripRequestData[0].ClientProfileModel.conditions ? tripRequestData[0].ClientProfileModel.conditions.toString() : '-')               
                    .form-group.col-sm-2
                        label(for='mobAids') Mobility Aid: 
                        input#clientName.form-control.form-control-sm(type='text' placeholder='Mobility Aid' name='mobAids'  readonly required='true' value=tripRequestData[0].ClientProfileModel.mobAids ? tripRequestData[0].ClientProfileModel.mobAids.toString() : '-')     
                    .form-group.col-sm-2
                        label(for='prefSpaceType') Space Type: 
                        input#prefSpaceType.form-control.form-control-sm(type='text' placeholder='Space Type' name='prefSpaceType'  readonly required='true' value=tripRequestData[0].ClientProfileModel.prefSpaceType ? tripRequestData[0].ClientProfileModel.prefSpaceType.toString() : '-')  
                .form-row
                    .form-group.col-sm-12
                        label(for='notes') Notes: 
                        input#notes.form-control.form-control-sm(type='text' placeholder='Notes' name='notes'  readonly required='true' value=tripRequestData[0].ClientProfileModel.notes)  
                hr
                .form-row
                    .form-group.col-sm-1
                        label(for='tripRequestId') TripHist.ID: 
                        input#tripRequestId.form-control.form-control-sm(type='text' placeholder='tripRequestId' name='tripRequestId'  readonly required='true' value=tripRequestData[0].id)               
                    .form-group.col-sm-1
                        label(for='bookingId') Bkg. ID: 
                        input#bookingId.form-control.form-control-sm(type='text' placeholder='Booking Id' name='bookingId'  readonly required='true' value=tripRequestData[0].bookingId)     
                    .form-group.col-md-2
                        label(for='priority') Priority: 
                        input#priority.form-control.form-control-sm(type='text' placeholder='Priority' name='priority'  readonly required='true' value=tripRequestData[0].priority) 
                    .form-group.col-sm-3
                        label(for='pName') Origin Name/Unit: 
                        input#pName.form-control.form-control-sm(type='text' placeholder='Origin Name' name='pName'  readonly required='true' value=tripRequestData[0].pName + ' , ' + tripRequestData[0].pUnit )     
                    .form-group.col-sm-5
                        label(for='address') Origin Address: 
                        input#address.form-control.form-control-sm(type='text' placeholder='Address' name='address'  readonly required='true' value=tripRequestData[0].pAddr + ', ' + tripRequestData[0].pCity  + ', ' +  tripRequestData[0].pZip )  

                .form-row
                    .form-group.col-sm-2
                        label(for='dateAdded') Date Added: 
                        input#dateAdded.form-control.form-control-sm(type='text' placeholder='Date Added' name='dateAdded'  readonly required='true' value=tripRequestData[0].DateAdded)    
                    .form-group.col-sm-2
                        label(for='tripTime') Trip/Appointment Time: 
                        input#tripTime.form-control.form-control-sm(type='text' placeholder='Time' name='tripTime'  readonly required='true' value=(tripRequestData[0].tripTime === null ? '--:--:--' : tripRequestData[0].tripTime.toString()) + ' / ' + 
                            (tripRequestData[0].appointmentTime === null ? '--:--:--' : tripRequestData[0].appointmentTime.toString()))  
                    .form-group.col-sm-3
                        label(for='dName') Destination Name/Unit: 
                        input#pName.form-control.form-control-sm(type='text' placeholder='Origin Name' name='pName'  readonly required='true' value=tripRequestData[0].dName  + ' , ' + tripRequestData[0].dUnit )     
                    .form-group.col-sm-5
                        label(for='address') Destination Address: 
                        input#address.form-control.form-control-sm(type='text' placeholder='Address' name='address'  readonly required='true' value=tripRequestData[0].dAddr + ', ' + tripRequestData[0].dCity  + ', ' +  tripRequestData[0].dZip ) 
                .form-row   
                    .form-group.col-sm-2
                        label(for='daysOfWeekRequested') Days-Week: 
                        input#daysOfWeekRequested.form-control.form-control-sm(type='text' placeholder='Days-Week' name='daysOfWeekRequested'  readonly required='true' value=tripRequestData[0].daysOfWeekRequested.toString())
                    .form-group.col-sm-10
                        label(for='notes') Notes: 
                        input#notes.form-control.form-control-sm(type='text' placeholder='Notes' name='notes'  readonly required='true' value=tripRequestData[0].notes)

            //- Create Desktop Review Form
            .container-fluid.card
                form(method='POST' action='')
                    .form-row
                        .form-group.col-md-2
                            label(for='tripRequestsId')
                            input#tripRequestsId.form-control(type='text' placeholder='Trip Requests ID' name='tripRequestsId' readonly required='true' style='display:none' value=tripRequestsId)
                    .form-row
                        .form-group.col-md-3
                            label(for='reviewLocation') Choose Review Location: 
                            select#reviewLocation.form-control.form-control-sm(type='select' required='true' name = "reviewLocation" value='')
                                option(value=null, label="-- Select --")
                                option(value='Pathway', label="Pathway") 
                                option(value='Origin', label="Origin")
                                option(value='Transfer', label= "Transfer")
                                option(value='Destination', label= "Destination")
                        .form-group.col-md-3
                            label(for='officersId') Assigned Officer: 
                            select#officersId.form-control.form-control-sm(type='select' required='true' name = "officersId" value='')
                                option(value=null, label="-- Select --") 
                                if officers
                                    each item , i in Object.entries(officers)
                                        option(value=item[1].id, label=item[1].id+ ": " + item[1].lastName + ", " + item[1].firstName)
                        .form-group.col-md-3
                            label(for='priority') Priority: 
                            select#priority.form-control.form-control-sm(type='select' name = "priority" value='')
                                option(value='Medium' selected='Medium', label="Medium")
                                option(value='High', label="High")
                                option(value='Medium', label= "Medium")
                                option(value='Low', label= "Low")
                        .form-group.col-md-3     
                            label(for='status') Status:
                            select#status.form-control.form-control-sm(type='select' required='true' name = "status" value='')
                                option(value='Not_started' selected='Not_started', label="Not started")
                                option(value='Not_started', label="Not started")
                                option(value='Hold', label="Hold") 
                                option(value='In_progress', label="In progress")
                                option(value='Completed', label= "Completed")
                    .form-row
                        .form-group.col-md-12
                            label(for='notes') Notes: 
                            input#notes.form-control.form-control-sm(type='text' placeholder='enter notes' name='notes' value='')
                            p
                    .formfooter
                            input.primarybutton.submit(type='submit' value='Create')
                            input.secondarybutton.submit(type='button' value='Cancel' onclick="location.href='/tripRequests/list';")
    

    if s_status == 'Record saved'
            .notifydiv
                h1=s_status
                img.notifyicon(src='/images/success.png')
                p
                button.neu.popupbtn(type='button' onclick="location.href='/reviews';") Go to Reviews
    
    if s_status == 'Record not created Error'
        .notifydiv
            h1=s_status
            img.notifywarningicon(src='/images/warningnotify.png')
            p
            button.neu.popupbtn(type='button' onclick="location.href='/reviews';") Go to Reviews

    if errors 
        ul
            for error in errors
                li!= error.msg