extends layout

block content
    script.
        function checkCompletedDate(valueSelected) {
            if (valueSelected === 'Completed') {
                document.getElementById('reviewCompleteDate').required = true;
            } else {
                document.getElementById('reviewCompleteDate').required = false;
            }
        }
    -if(desktopReviewResultCount !== 0) {var editPathwayURL = 'location.href=' + '"../pathwayItinerary/update?tripRequestId=' + desktopReviewData[0].TripRequestModel.id + '"' + ';';}

    .topnav
        ul.breadcrumb
            li
                a(href='/reviews') Reviews Dashboard
                    i.fa.fa-caret-right(aria-hidden='true')
            li Desktop Review Details page
        .gradient
            .username.userright #{user.username} 
                i.fa.fa-user-circle(aria-hidden='true').usernameicon

    if desktopReviewData && !(desktopReviewResultCount === 0)
        .container-fluid.card
            .form-row
                .form-group.col-sm-2
                    label(for='clientId') ClientID: 
                    input#clientId.form-control.form-control-sm(type='text' placeholder='ClientId' name='clientId'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.clientId)               
                .form-group.col-sm-2
                    label(for='clientName') Client Name: 
                    input#clientName.form-control.form-control-sm(type='text' placeholder='Client Name' name='clientName'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.clientName)     
                .form-group.col-sm-2
                    label(for='active') Active: 
                    input#active.form-control.form-control-sm(type='text' placeholder='Active' name='active'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.active)   
                .form-group.col-sm-2
                    label(for='conditions') Conditions: 
                    input#conditions.form-control.form-control-sm(type='text' placeholder='Conditions' name='conditions'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.conditions ? desktopReviewData[0].TripRequestModel.ClientProfileModel.conditions.toString() : '-')               
                .form-group.col-sm-2
                    label(for='mobAids') Mobility Aid: 
                    input#clientName.form-control.form-control-sm(type='text' placeholder='Mobility Aid' name='mobAids'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.mobAids ? desktopReviewData[0].TripRequestModel.ClientProfileModel.mobAids.toString() : '-')     
                .form-group.col-sm-2
                    label(for='prefSpaceType') Space Type: 
                    input#prefSpaceType.form-control.form-control-sm(type='text' placeholder='Space Type' name='prefSpaceType'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.prefSpaceType ? desktopReviewData[0].TripRequestModel.ClientProfileModel.prefSpaceType.toString() : '-')  
                .form-group.col-sm-12
                    label(for='notes') Notes: 
                    input#notes.form-control.form-control-sm(type='text' placeholder='Notes' name='notes'  readonly required='true' value=desktopReviewData[0].TripRequestModel.ClientProfileModel.notes)  
            hr
            .form-row
                .form-group.col-sm-1
                    label(for='tripRequestId') TripHist.ID: 
                    input#tripRequestId.form-control.form-control-sm(type='text' placeholder='tripRequestId' name='tripRequestId'  readonly required='true' value=desktopReviewData[0].TripRequestModel.id)               
                .form-group.col-sm-1
                    label(for='bookingId') Bkg.ID: 
                    input#bookingId.form-control.form-control-sm(type='text' placeholder='Booking Id' name='bookingId'  readonly required='true' value=desktopReviewData[0].TripRequestModel.bookingId)
                .form-group.col-sm-2
                    label(for='priority') Priority: 
                    input#priority.form-control.form-control-sm(type='text' placeholder='Priority' name='priority'  readonly required='true' value=desktopReviewData[0].TripRequestModel.priority) 
                .form-group.col-sm-3
                    label(for='pName') Origin Name/Unit: 
                    input#pName.form-control.form-control-sm(type='text' placeholder='Origin Name/Unit' name='pName'  readonly required='true' value=desktopReviewData[0].TripRequestModel.pName + ' , ' + desktopReviewData[0].TripRequestModel.pUnit)     
                .form-group.col-sm-5
                    label(for='address') Origin Address: 
                    input#address.form-control.form-control-sm(type='text' placeholder='Address' name='address'  readonly required='true' value=desktopReviewData[0].TripRequestModel.pAddr + ', ' + desktopReviewData[0].TripRequestModel.pCity  + ', ' +  desktopReviewData[0].TripRequestModel.pZip )  
            .form-row
                .form-group.col-sm-2
                    label(for='dateAdded') Date Added: 
                    input#dateAdded.form-control.form-control-sm(type='text' placeholder='Date Added' name='dateAdded'  readonly required='true' value=desktopReviewData[0].TripRequestModel.DateAdded)                
                .form-group.col-sm-2
                    label(for='tripTime') Trip/Appointment Time: 
                    input#tripTime.form-control.form-control-sm(type='text' placeholder='Time' name='tripTime'  readonly required='true' value=(desktopReviewData[0].TripRequestModel.tripTime === null ? '--:--:--' : desktopReviewData[0].TripRequestModel.tripTime) + ' / ' + 
                        (desktopReviewData[0].TripRequestModel.appointmentTime === null ? '--:--:--' : desktopReviewData[0].TripRequestModel.appointmentTime) )     
                .form-group.col-sm-3
                    label(for='dName') Destination Name/Unit: 
                    input#pName.form-control.form-control-sm(type='text' placeholder='Origin Name' name='pName'  readonly required='true' value=desktopReviewData[0].TripRequestModel.dName + ' , ' + desktopReviewData[0].TripRequestModel.dUnit)     
                .form-group.col-sm-5
                    label(for='address') Destination Address: 
                    input#address.form-control.form-control-sm(type='text' placeholder='Address' name='address'  readonly required='true' value=desktopReviewData[0].TripRequestModel.dAddr + ', ' + desktopReviewData[0].TripRequestModel.dCity  + ', ' +  desktopReviewData[0].TripRequestModel.dZip ) 
            .form-row   
                .form-group.col-sm-2
                    label(for='daysOfWeekRequested') Days-Week: 
                    input#daysOfWeekRequested.form-control.form-control-sm(type='text' placeholder='Days-Week' name='daysOfWeekRequested'  readonly required='true' value=desktopReviewData[0].TripRequestModel.daysOfWeekRequested.toString())
                .form-group.col-sm-10
                    label(for='notes') Notes: 
                    input#notes.form-control.form-control-sm(type='text' placeholder='Notes' name='notes'  readonly required='true' value=desktopReviewData[0].TripRequestModel.notes)
    
            .form-row
                .form-group.col-md-2
                    input.primarybutton(type='button' value='Edit-Pathway' onclick=editPathwayURL)
            
        .container-fluid.card
            form(method='POST' action='')
                .form-row
                    .form-group.col-sm-2
                        label(for='desktopReviewId') Desktop Review ID: 
                        input#desktopReviewId.form-control.form-control-sm(type='text' placeholder='Desktop Review ID' name='desktopReviewId'  readonly required='true' value=desktopReviewData[0].id) 
                    .form-group.col-sm-2
                        label(for='reviewLocation') Review Location: 
                        input#reviewLocation.form-control.form-control-sm(type='text' placeholder='Review Location' name='reviewLocation'  readonly required='true' value=desktopReviewData[0].reviewLocation)   
                    .form-group.col-sm-2
                        label(for='officer') Officer: 
                        input#officer.form-control.form-control-sm(type='text' placeholder='Officer' name='officer'  readonly required='true' value=desktopReviewData[0].OfficerModel.id + '. '+ desktopReviewData[0].OfficerModel.lastName + ', ' + desktopReviewData[0].OfficerModel.firstName ) 
                    .form-group.col-sm-2
                        label(for='priority') Priority: 
                        input#priority.form-control.form-control-sm(type='text' placeholder='Priority' name='priority'  readonly required='true' value=desktopReviewData[0].priority) 
                    .form-group.col-sm-2  
                        label(for='status') Status:
                        select#status.form-control.form-control-sm(type='select' name='status' required='true' value=desktopReviewData[0].status onmousedown="this.value=''" onchange="checkCompletedDate(this.value);")
                            option(value=desktopReviewData[0].status selected=true label=desktopReviewData[0].status)
                            option(value='Not_started', label="Not started")
                            option(value='Hold', label="Hold") 
                            option(value='In_progress', label="In progress")
                            option(value='Completed', label="Completed")
                .form-row
                    .form-group.col-sm-2
                        label(for='reviewStartDate') Review Start Date: 
                        input#reviewStartDate.form-control.form-control-sm(type='text' placeholder='Review Start Date' name='reviewStartDate' readonly required='true' value=desktopReviewData[0].reviewStartDate)    
                    .form-group.col-sm-2
                        label(for='reviewCompleteDate') Review Complete Date:
                        input#reviewCompleteDate.form-control.form-control-sm(type='date' placeholder='Review Complete Date' name='reviewCompleteDate' required='true' value=desktopReviewData[0].reviewCompleteDate)
                    .form-group.col-sm-6
                        label(for='notes') Notes: 
                        input#notes.form-control.form-control-sm(type='text' placeholder='Notes' name='notes' value=desktopReviewData[0].notes)
                .formfooter
                        input.primarybutton(type='submit' value='Update')
                        input.secondarybutton.buttonmargin(type='button' value='Cancel' onclick="location.href='../reviews';")


    if  desktopReviewResultCount === 0
        p No Records Found
  
    if s_status == 'Record updated'
        .alert.alert-success.alert-dismissable.fade.show(role='alert')
            .popupalerts
                button.close(type='button' data-dismiss='alert')
                    span(aria-hidden='true') &times;
                .notificationicon
                    iconify-icon(data-icon='teenyicons:tick-circle-outline')
                h2.alert-heading Success! 
                p                    
                .alert-body
                    | Record is updated! 
                p                 
                .alert-footer
                    button.neu.popupbtn(type='button' onclick="location.href='/reviews';") Go to Reviews

    if s_status == 'Error updating record'
        .alert.alert-danger.alert-dismissable.fade.show(role='alert')
            .popupalerts
                button.close(type='button' data-dismiss='alert')
                    span(aria-hidden='true') &times;
                .warningicon
                    iconify-icon(data-icon='carbon:warning-square')
                h2.alert-heading Failed!
                p
                .alert-body
                    | Error creating record!
                p
                .alert-footer
                    button.neu.popupbtn(type='button' onclick="location.href='/reviews';") Go to Reviews
   
    if errors 
        ul
            for error in errors
                li!= error.msg